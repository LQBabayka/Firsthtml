      // Про переменные
var message; //это коментарий в JS (a-z, A-Z. 0-9, $) и только с буквы
message = "Сообщение"
var myNumber10 = 10;
var myNumber999 = 999
var string = "Чо, пацаны, Анимэ?"; // если указать число в кавычках, то тип числа изменится на строку
var boolean = true; //or false
var my_null = null; //только это значение
var undefined = undefined; //только это значение
var myObject1 = {
    name: "Уася",
    surname: "Петров",
    age: 33,
    getFullname: function() {
      return this.name + " " + this.surname;
    }
};
// Вообще объявление переменной через var - устаревшая практика, она объявляет для всего кода и даже для обращающихся файлов.
//В основном лучше использовать let и const ссылка: https://habr.com/ru/company/ruvds/blog/420359/

      // Про числа
var result = 40 + 10;
console.log(40+11);
console.log(myNumber10 + 1);
console.log(myNumber999 * 99);
console.log("40" + myNumber10); //В кавычках уже не число, а строка. В этом случае 40 присоединяется к переменной. Это называется канкатенацией.
      // Про строки
console.log(string + " Ну да, а чё?")
console.log(string. toLowerCase()); //Пример исползования метода. В этом случае приведение строки к нижнему регистру.
console.log(string. toUpperCase()); //Ну а тут метод  привел к верхнему регистру

      //Про массивы (Arrays)
var massive = []; //Это пустой массив, индекс (нумерация) начинается с нуля [0]
var names = ["Дима", "Саша", "Кирилл"]; //Имена это элементы
console.log(names[2]); //Тут вернули Кирилла (0,1,2)
console.log(names[1].toUpperCase());//Еще применили к вернувшемуся элементу метод

names [0] = "Антон"; //Подменил элемент
console.log(names[0]); //И вывел его в консоль

names.push("Гриша"); //Добавил новый элемент в массив names (он будет под индексом 3)
console.log(names[3]);
console.log(names); //Таким образом можно вывести весь массив в консоль

      //Про условия
//if () {}   В {} указывается выполняемый код,при условии совпадения в части ()
if (10 > 1) {
  console.log("Первый ИФ)))");
}
//пояснение за знак =
if ("5" === 5) {
  console.log("Знаки равенства имеют разные значения");
}// = это присваивание, == это сравнивание("5"==5), ===(сравнение конкретных значений)
//лучше использовать === во избежание проблем

//пояснение за знак != неравно
//!= простое, только значение. !== строгое, учитывает типы
if ("Дмитрий" !== "Димон") {
  console.log("Он вам не Димон!");
} // Дмитрий неравно Димон - условие выполняется, подразумевается возвращение true

//использование логического И (AND) при помощи двойного амперсанда &&
if ("Дмитрий" !== "Димон" && myNumber999 > 100) {
  console.log("Теперь амперсанд");
}
//использование логического ИЛИ (OR) при помощи ||
if (myNumber999 > 1000 || 2 === 2) {
  console.log("Теперь ИЛИ");
}
//мешанина из нескольких И, а так же ИЛИ
if (myNumber999 > 9 && 2 === 2 && "стопка" === "стопка" && myNumber10 > 1 && 69 === 69 || "zhi" === "est") {
  console.log("Пять условий");
}
//Теперь применение оператора else (Иначе, Еще, А так же) внутри if:
if (10 < 1) {
  console.log("Десять больше одного");
  } else {
    console.log("Десять меньше одного");
  } //Тут возле если возращается false и выполняется оператор else
console.log("Стопэ!!!!!!!!!!!!!!!!");

    //Про циклы
//Они предназначены для повторения участков кода n количество раз
for (var i = 0; i < 10; i++) {
  console.log(i);
} //где for - цикл, var i = 0 - введение переменной, i < 10 - условие, i++ - действие(увеличение на 1). Такая тема выведет числа от 1 до 10
console.log("Стопэ!!!!!!!!!!!!!!!!");
//Применим оператор break. Он прерывает цикл
for (var i = 0; i < 10; i++) {
  console.log(i);
  if (i == 5) {
    break;
  }
} //В этом случае цифра 5 вошла в значение консоли, так как консоль размещена в месте, где до 5 дошла очередь
console.log("Стопэ!!!!!!!!!!!!!!!!");
for (var i = 0; i < 10; i++) {
    if (i == 5) {
    break;
  }
  console.log(i);
} // Ну а тут консоль перенесена в место, после break и через if сработала команда break и после вывелся результат
console.log("Стопэ!!!!!!!!!!!!!!!!");
//Применим оператор continue для перехода к следующей итерации
for (var i = 0; i < 10; i++) {
    if (i == 5) {
    continue;
  }
  console.log(i);
} // При этом раскладе вышли все числа от 1 до 10 кроме 5, так как на 5 я прервал конкретный циклы
  console.log("Стопэ!!!!!!!!!!!!!!!!");
//Проба прерывания цикла, а после его завершение
for (var i = 0; i < 10; i++) {
    if (i == 5) {
    continue;
    }
      if (i == 6) {
      break;
      }
  console.log(i);
}
// пример использования свойства lenght, которое возвращает длину или количество элементов объекта
  for (var y = 0; y < names.length; y++) {
    console.log(names[y]);
  }
  console.log("Стопэ!!!!!!!!!!!!!!!!");
// Далее про цикл while. отличай от for заключается в объявлении переменной до цикла и прибавление(пересчет) указывается в фигурных скобках.
var u = 0
while (u < 5) {
  console.log(u);
  u++
}

    //Про Функции
//главная идея функций это избавиться от дублёжки кода. Далее пример простой функции выводящей текст в консоли:
function test() {
  console.log("Функция тест, ёпта!");
} //Теперь, её нужно вызвать следующим образом:
test();
//далее пример функции суммы:
function sum(y, i) {
  console.log(y + i);
}
sum(11, 100);

//Для возвращения значения используем return. А для вывода инфы в консоль, вписываем функцию в логю
function sum2(o, p) {
  return o + p;
}
    console.log(sum2(150, 150));
    console.log(sum2(55, 66));
    console.log(sum2(22, 44));
  //В верхнем примере выводятся нескололько параметров для одной функции.

    // Про объекты
  console.log(myObject1);
  console.log(myObject1.name);// можно показать определенный параметр объекта
  myObject1.age = "35"; // можно изменить определенный параметр объекта
  console.log(myObject1.age);
  console.log(myObject1.getFullname());

  //Вышеуказанные примеры взяты из ролика: https://www.youtube.com/watch?v=4QHFhIjF2L0&t=3733s&ab_channel=%D0%90%D0%BB%D0%B5%D0%BA%D1%81%D0%B0%D0%BD%D0%B4%D1%80%D0%9F%D0%B0%D1%83%D0%BA%D0%BE%D0%B2
